<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Koo&#39;s blog</title>
  <icon>https://www.gravatar.com/avatar/3f699edf093c84da2984d079893f3080</icon>
  
  <link href="//atom.xml" rel="self"/>
  
  <link href="http://ElaineKoo.github.io/"/>
  <updated>2018-11-16T02:22:08.420Z</updated>
  <id>http://ElaineKoo.github.io/</id>
  
  <author>
    <name>Koo</name>
    <email>593321338@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>记 laravel chunk 遇到的坑</title>
    <link href="http://ElaineKoo.github.io/2018/11/15/%E8%AE%B0laravel-chunk%E9%81%87%E5%88%B0%E7%9A%84%E5%9D%91/"/>
    <id>http://ElaineKoo.github.io/2018/11/15/记laravel-chunk遇到的坑/</id>
    <published>2018-11-15T06:15:43.000Z</published>
    <updated>2018-11-16T02:22:08.420Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>laravel给我们提供了方便的chunk方法，如果你需要处理数千个 Eloquent 记录，可以使用 chunk 命令。chunk 方法会检索 Eloquent 模型的「分块」，将它们提供给指定的 Closure 进行处理。在处理大型结果集时，使用 chunk 方法可节省内存：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Flight::chunk(100, function ($flights) &#123;</span><br><span class="line">    foreach ($flights as $flight) &#123;</span><br><span class="line">        //对每条数据做一些处理</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>如果’flights’表中有1000条数据，将拆成10次查询：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">select * from `flights` limit 100 offset 0</span><br><span class="line">//对每条数据做一些处理</span><br><span class="line">select * from `flights` limit 100 offset 100</span><br><span class="line">//对每条数据做一些处理</span><br><span class="line">select * from `flights` limit 100 offset 200</span><br><span class="line">//对每条数据做一些处理</span><br><span class="line">select * from `flights` limit 100 offset 300</span><br><span class="line">//对每条数据做一些处理</span><br><span class="line">select * from `flights` limit 100 offset 400</span><br><span class="line">//对每条数据做一些处理</span><br><span class="line">select * from `flights` limit 100 offset 500</span><br><span class="line">//对每条数据做一些处理</span><br><span class="line">select * from `flights` limit 100 offset 600</span><br><span class="line">//对每条数据做一些处理</span><br><span class="line">select * from `flights` limit 100 offset 700</span><br><span class="line">//对每条数据做一些处理</span><br><span class="line">select * from `flights` limit 100 offset 800</span><br><span class="line">//对每条数据做一些处理</span><br><span class="line">select * from `flights` limit 100 offset 900</span><br><span class="line">//对每条数据做一些处理</span><br></pre></td></tr></table></figure></p><a id="more"></a><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><table><thead><tr><th>id</th><th>xx</th><th>yy  </th></tr></thead><tbody><tr><td> 1</td><td>0</td><td>0  </td></tr><tr><td> 2</td><td>0</td><td>0  </td></tr><tr><td> 3</td><td>0</td><td>0  </td></tr><tr><td> ..</td><td>..</td><td>.. </td></tr><tr><td> ..</td><td>..</td><td>..  </td></tr><tr><td>1000</td><td>0</td><td>0  </td></tr></tbody></table><h2 id="如果我们按xx进行筛选，更新yy字段，这样不会出任何问题。"><a href="#如果我们按xx进行筛选，更新yy字段，这样不会出任何问题。" class="headerlink" title="如果我们按xx进行筛选，更新yy字段，这样不会出任何问题。"></a>如果我们按xx进行筛选，更新yy字段，这样不会出任何问题。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Flight::where(&apos;xx&apos;, 0)-&gt;chunk(100, function ($flights) &#123;</span><br><span class="line">    foreach ($flights as $flight) &#123;</span><br><span class="line">        //$res = 通过flight与关联表的关系得出来值，这也是我们为什么需要通过这种方法更新 </span><br><span class="line">        $flight-&gt;yy = $res;</span><br><span class="line">        $flight-&gt;save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更新所有xx=0的yy。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">select * from `flights` where  `xx` = 0 limit 100 offset 0</span><br><span class="line">update `flights` set `yy` = 152 where `id` = 1 </span><br><span class="line">update `flights` set `yy` = 12 where `id` = 2 </span><br><span class="line">update `flights` set `yy` = 123 where `id` = 3 </span><br><span class="line">...</span><br><span class="line">update `flights` set `yy` = 52 where `id` = 99</span><br><span class="line">update `flights` set `yy` = 512 where `id` = 100</span><br><span class="line">select * from `flights` where  `xx` = 0 limit 100 offset 100</span><br><span class="line">update `flights` set `yy` = 12 where `id` = 101 </span><br><span class="line">update `flights` set `yy` = 112 where `id` =102 </span><br><span class="line">update `flights` set `yy` = 13 where `id` = 103 </span><br><span class="line">...</span><br><span class="line">update `flights` set `yy` = 5 where `id` = 199</span><br><span class="line">update `flights` set `yy` = 512 where `id` = 200</span><br><span class="line">select * from `flights` where  `xx` = 0 limit 100 offset 200</span><br><span class="line">update `flights` set `yy` = 12 where `id` = 201 </span><br><span class="line">update `flights` set `yy` = 112 where `id` =202 </span><br><span class="line">update `flights` set `yy` = 13 where `id` = 203 </span><br><span class="line">...</span><br><span class="line">update `flights` set `yy` = 5 where `id` = 299</span><br><span class="line">update `flights` set `yy` = 512 where `id` = 300</span><br><span class="line">select * from `flights` where  `xx` = 0 limit 100 offset 300</span><br><span class="line">...</span><br><span class="line">select * from `flights` where  `xx` = 0 limit 100 offset 400</span><br><span class="line">...</span><br><span class="line">select * from `flights` where  `xx` = 0 limit 100 offset 500</span><br><span class="line">...</span><br><span class="line">select * from `flights` where  `xx` = 0 limit 100 offset 600</span><br><span class="line">...</span><br><span class="line">select * from `flights` where  `xx` = 0 limit 100 offset 700</span><br><span class="line">...</span><br><span class="line">select * from `flights` where  `xx` = 0 limit 100 offset 800</span><br><span class="line">...</span><br><span class="line">select * from `flights` where  `xx` = 0 limit 100 offset 900</span><br><span class="line">update `flights` set `yy` = 12 where `id` = 901 </span><br><span class="line">update `flights` set `yy` = 112 where `id` =902 </span><br><span class="line">update `flights` set `yy` = 13 where `id` = 903 </span><br><span class="line">...</span><br><span class="line">update `flights` set `yy` = 5 where `id` = 999</span><br><span class="line">update `flights` set `yy` = 512 where `id` = 1000</span><br></pre></td></tr></table></figure><h2 id="如果我们按yy进行筛选，更新yy字段，这样就会出问题。"><a href="#如果我们按yy进行筛选，更新yy字段，这样就会出问题。" class="headerlink" title="如果我们按yy进行筛选，更新yy字段，这样就会出问题。"></a>如果我们按yy进行筛选，更新yy字段，这样就会出问题。</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Flight::where(&apos;yy&apos;, 0)-&gt;chunk(100, function ($flights) &#123;</span><br><span class="line">    foreach ($flights as $flight) &#123;</span><br><span class="line">        //$res = 通过flight与关联表的关系得出来值(反正不是0)，这也是我们为什么需要通过这种方法更新 </span><br><span class="line">        $flight-&gt;yy = $res;</span><br><span class="line">        $flight-&gt;save();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>更新所有yy=0的yy。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">select * from `flights` where  `yy` = 0 limit 100 offset 0</span><br><span class="line">update `flights` set `yy` = 152 where `id` = 1 </span><br><span class="line">update `flights` set `yy` = 12 where `id` = 2 </span><br><span class="line">update `flights` set `yy` = 123 where `id` = 3 </span><br><span class="line">...</span><br><span class="line">update `flights` set `yy` = 52 where `id` = 99</span><br><span class="line">update `flights` set `yy` = 512 where `id` = 100</span><br><span class="line">select * from `flights` where  `yy` = 0 limit 100 offset 100</span><br><span class="line">update `flights` set `yy` = 12 where `id` = 201 </span><br><span class="line">update `flights` set `yy` = 112 where `id` =202 </span><br><span class="line">update `flights` set `yy` = 13 where `id` = 203 </span><br><span class="line">...</span><br><span class="line">update `flights` set `yy` = 5 where `id` = 299</span><br><span class="line">update `flights` set `yy` = 512 where `id` = 300</span><br><span class="line">select * from `flights` where  `yy` = 0 limit 100 offset 200</span><br><span class="line">update `flights` set `yy` = 12 where `id` = 401 </span><br><span class="line">update `flights` set `yy` = 112 where `id` =402 </span><br><span class="line">update `flights` set `yy` = 13 where `id` = 403 </span><br><span class="line">...</span><br><span class="line">update `flights` set `yy` = 5 where `id` = 499</span><br><span class="line">update `flights` set `yy` = 512 where `id` = 400</span><br><span class="line">select * from `flights` where  `yy` = 0 limit 100 offset 300</span><br><span class="line">update `flights` set `yy` = 12 where `id` = 601 </span><br><span class="line">update `flights` set `yy` = 112 where `id` =602 </span><br><span class="line">update `flights` set `yy` = 13 where `id` = 603 </span><br><span class="line">...</span><br><span class="line">update `flights` set `yy` = 5 where `id` = 699</span><br><span class="line">update `flights` set `yy` = 512 where `id` = 600</span><br><span class="line">select * from `flights` where  `yy` = 0 limit 100 offset 400</span><br><span class="line">update `flights` set `yy` = 12 where `id` = 801 </span><br><span class="line">update `flights` set `yy` = 112 where `id` =802 </span><br><span class="line">update `flights` set `yy` = 13 where `id` = 803 </span><br><span class="line">...</span><br><span class="line">update `flights` set `yy` = 5 where `id` = 899</span><br><span class="line">update `flights` set `yy` = 512 where `id` = 800</span><br></pre></td></tr></table></figure><p>很困惑，为什么表中还是有yy=0的数据。<br>在执行 <code>select * from flights where  yy = 0 limit 100 offset 100</code> 之前，id=1~100的数据yy已经不等于0了，所以在执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `flights` where  `yy` = 0 limit 100 offset 100</span><br></pre></td></tr></table></figure></p><p>的时候，搜索出的是id=201~300的数据，而id=101~200的数据，只有在再次搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from `flights` where  `yy` = 0 limit 100 offset 0</span><br></pre></td></tr></table></figure></p><p>的时候才会出现。</p><h1 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h1><p>所以，我们要避免使用 chunk 的时候，更改和过滤条件的字段的值。</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;laravel给我们提供了方便的chunk方法，如果你需要处理数千个 Eloquent 记录，可以使用 chunk 命令。chunk 方法会检索 Eloquent 模型的「分块」，将它们提供给指定的 Closure 进行处理。在处理大型结果集时，使用 chunk 方法可节省内存：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Flight::chunk(100, function ($flights) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    foreach ($flights as $flight) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        //对每条数据做一些处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;如果’flights’表中有1000条数据，将拆成10次查询：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;select * from `flights` limit 100 offset 0&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对每条数据做一些处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from `flights` limit 100 offset 100&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对每条数据做一些处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from `flights` limit 100 offset 200&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对每条数据做一些处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from `flights` limit 100 offset 300&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对每条数据做一些处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from `flights` limit 100 offset 400&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对每条数据做一些处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from `flights` limit 100 offset 500&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对每条数据做一些处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from `flights` limit 100 offset 600&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对每条数据做一些处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from `flights` limit 100 offset 700&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对每条数据做一些处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from `flights` limit 100 offset 800&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对每条数据做一些处理&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;select * from `flights` limit 100 offset 900&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//对每条数据做一些处理&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="laravel" scheme="http://ElaineKoo.github.io/tags/laravel/"/>
    
      <category term="php" scheme="http://ElaineKoo.github.io/tags/php/"/>
    
      <category term="chunk" scheme="http://ElaineKoo.github.io/tags/chunk/"/>
    
  </entry>
  
  <entry>
    <title>原型模式</title>
    <link href="http://ElaineKoo.github.io/2018/11/13/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ElaineKoo.github.io/2018/11/13/原型模式/</id>
    <published>2018-11-13T07:26:06.000Z</published>
    <updated>2018-11-19T04:30:35.969Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>不通过new关键字来产生一个对象，而是通过对象复制来实现的模式叫做原型模式<br>简单程度仅次于单例模式和迭代器模式，使用广泛<br>用原型实例指定创建对象的种类，并且通过拷贝这些原型创建的对象<br>核心就是clone方法，通过该方法进行对象的拷贝，JAVA提供了Cloneable接口，标示这个对象是可拷贝的。覆写clone方法。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>性能优良。原型模式是内存二进制流的拷贝。</li><li>逃避构造函数的约束。不执行构造函数，优点和缺点都是减少了约束。</li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>资源优化场景。类初始化需要消化非常多的资源，包括数据和硬件资源等。</li><li>性能和安全要求的场景。通过new产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。</li><li>一个对象多个修改者的场景。一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时。</li></ol><p><em>原型模式很少单独出现，一般和工厂方法模式一起出现，通过clone的方法创建一个对象，然后由工厂方法提供给调用者</em></p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><ol><li>构造函数不会被执行</li><li>浅拷贝和深拷贝<br><em>使用原型模式时，引用的成员变量必须满足两个条件才不会被拷贝：一是类的成员变量，而不是方法内变量；二是必须是一个可变的引用对象，而不是一个原始类型或不可变类型</em></li><li>clone与final关键字冲突</li></ol><p>参考<br>《设计模式之禅》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;不通过new关键字来产生一个对象，而是通过对象复制来实现的模式叫做原型模式&lt;br&gt;简单程度仅次于单例模式和迭代器模式，使用广泛&lt;br&gt;用原型
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://ElaineKoo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="原型模式" scheme="http://ElaineKoo.github.io/tags/%E5%8E%9F%E5%9E%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>代理模式</title>
    <link href="http://ElaineKoo.github.io/2018/11/13/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ElaineKoo.github.io/2018/11/13/代理模式/</id>
    <published>2018-11-13T05:42:28.000Z</published>
    <updated>2018-11-19T04:30:35.972Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>也叫委托模式，为其他对象提供一种代理，以控制对这个对象的访问。使用率非常高。提供非常好的访问控制。</p><h2 id="角色"><a href="#角色" class="headerlink" title="角色"></a>角色</h2><ol><li>Subject抽象主题角色。可以是抽象类也可以是接口</li><li>RealSubject具体主题角色。也称为被委托角色或被代理角色，业务逻辑的具体执行者</li><li>Proxy代理主题角色。也称为委托类、代理类</li></ol><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">public interface Subject &#123;</span><br><span class="line">    public void request();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class RealSubject implements Subject &#123;</span><br><span class="line">    public void request() &#123;</span><br><span class="line">        //业务逻辑</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Proxy implements Subject &#123;</span><br><span class="line">    private Subject subject = null;</span><br><span class="line">    </span><br><span class="line">    public Proxy() &#123;</span><br><span class="line">        this.subject = new Proxy();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public Proxy(Subject subject) &#123;</span><br><span class="line">        this.subject = subject;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void request() &#123;</span><br><span class="line">        this.before();</span><br><span class="line">        this.subject.request();</span><br><span class="line">        this.after();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    public void before() &#123;&#125;</span><br><span class="line">    public void after() &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>职责清晰。真实角色就是实现实际的业务逻辑，不用关心其他非本职责的事务，通过后期的代理完成一件事务，附带的结果就是编程简洁清晰</li><li>高扩展性。具体主题角色随时发生变化，不管怎么变化，只要实现了接口，那代理类完全就可以在不做任何修改的情况下使用。</li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>Spring AOP</p><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol><li>普通代理，要求客户端只能访问代理角色，而不能访问真实角色。<br>普通代理模式的约束问题，尽量通过团队内的变成规范类约束，因为每一个主题类是可被重用的和可维护的，实用技术约束的方式对系统维护是一种非常不利的因素</li><li>强制代理，强制必须通过真是角色查找到代理角色，否则不能访问。只有通过真实角色指定的代理类才可以访问，由真是角色管理代理角色。可以不知道代理的存在，但是你的所作所为还是需要代理为你提供。</li><li>代理是有个性的。代理类可以为真实角色预处理消息、过滤消息、消息转发、事后处理消息等功能。可以代理多个真实角色。</li><li>动态代理。动态代理是在实现阶段不用关心代理谁，而在运行阶段才指定代理哪个对象。横切面编程（AOP）核心就是动态代理机制。？？</li></ol><p>参考<br>《设计模式之禅》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;也叫委托模式，为其他对象提供一种代理，以控制对这个对象的访问。使用率非常高。提供非常好的访问控制。&lt;/p&gt;
&lt;h2 id=&quot;角色&quot;&gt;&lt;a h
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://ElaineKoo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="代理模式" scheme="http://ElaineKoo.github.io/tags/%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>建造者模式</title>
    <link href="http://ElaineKoo.github.io/2018/11/13/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ElaineKoo.github.io/2018/11/13/建造者模式/</id>
    <published>2018-11-13T03:12:56.000Z</published>
    <updated>2018-11-19T04:30:35.979Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码实例"><a href="#代码实例" class="headerlink" title="代码实例"></a>代码实例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line">public abstract class CarBuilder &#123;</span><br><span class="line">    //设置组装顺序</span><br><span class="line">    public abstract void setSequence(ArrayList&lt;String&gt; sequence);</span><br><span class="line">    //设置完毕顺序后，就可以直接拿到这个车辆模型</span><br><span class="line">    public abstract CarModel getCarModel();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class BenzBuilder extends CarBuilder &#123;</span><br><span class="line">    private BenzModel benz = new BenzModel();</span><br><span class="line">    //设置组装顺序</span><br><span class="line">    public void setSequence(ArrayList&lt;String&gt; sequence)&#123;</span><br><span class="line">        this.benz.setSequence(sequence);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //设置完毕顺序后，就可以直接拿到这个车辆模型</span><br><span class="line">    public CarModel getCarModel() &#123;</span><br><span class="line">        return this.benz;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class BMWBuilder extends CarBuilder &#123;</span><br><span class="line">    private BMWModel bmw = new BMWModel();</span><br><span class="line">    //设置组装顺序</span><br><span class="line">    public void setSequence(ArrayList&lt;String&gt; sequence)&#123;</span><br><span class="line">        this.bmw.setSequence(sequence);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //设置完毕顺序后，就可以直接拿到这个车辆模型</span><br><span class="line">    public CarModel getCarModel() &#123;</span><br><span class="line">        return this.bmw;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Director &#123;</span><br><span class="line">    private ArrayList&lt;String&gt; sequence = new ArrayList();</span><br><span class="line">    private BenzBuilder benzBuilder = new BenzBuilder();</span><br><span class="line">    private BMWBuilder bmwBuilder = new bmwBuilder();</span><br><span class="line">    </span><br><span class="line">    public BenzModel getABenzModel() &#123;</span><br><span class="line">        this.sequence.clear();</span><br><span class="line">        </span><br><span class="line">        this.sequesce.add(&quot;start&quot;);</span><br><span class="line">        this.sequesce.add(&quot;stop&quot;);</span><br><span class="line">        this.benzBuilder.setSequence(this.sequence);</span><br><span class="line">        return (BenzModel)this.benzBuilder.getCarModel();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Director director = new Director();</span><br><span class="line">        </span><br><span class="line">        for(int i = 0; i &lt; 1000; i++) &#123;</span><br><span class="line">            director.getABenzModel().run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>需求是无底洞，是无理性的</em></p><a id="more"></a><h2 id="导演类"><a href="#导演类" class="headerlink" title="导演类"></a>导演类</h2><p>指挥各事件的先后顺序</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>也叫生成器模式，将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</p><h2 id="四个角色"><a href="#四个角色" class="headerlink" title="四个角色"></a>四个角色</h2><ol><li>Product产品类，实现模板方法模式</li><li>Builder抽象建造类，规划产品的组建，一般由子类实现。CarBuilder</li><li>ConcreteBuilder具体建造者，实现抽象类定义好的所有方法，并且返回一个组建好的对象。BenzBuilder和BMWBuilder</li><li>Director导演类，负责安排已有模块顺序，告诉Builder开始建造。</li></ol><p><em>导演类起到封装的作用，避免高层模块深入到建造者内部的实现类。导演类可以有多个</em></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>封装性。使用建造者模式可以使客户端不必知道产品内部组成的细节。</li><li>建造者独立，容易扩展。BenzBuilder和BMWBuilder互相独立，对系统的扩展非常有利</li><li>便于控制细节风险。建造者独立，可对建造过程逐步细化，而不对其他模块产生任何影响</li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>相同的方法，不同的执行顺序，产生不同的事件结果时</li><li>多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时</li><li>产品类非常复杂，或者产品类中的调用顺序不同产生了不同的效能时</li><li>在对象创建过程中会使用到系统中的一些其他对象，这些对象在产品对象的创建过程中不易得到时。补偿方法，设计阶段没有发觉。</li></ol><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>建造者模式关注的是零件类型和装配工艺（顺序），与工厂方法模式最大的不同。建造者模式最主要的功能是基本方法的调用顺序安排，顺序不同产生的对象也不同；工厂方法重点是创造，创建零件是它的主要职责，组装顺序则不是它关心的。<br>使用建造者模式的时候考虑一下模板方法模式。</p><p>参考<br>《设计模式之禅》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码实例&quot;&gt;&lt;a href=&quot;#代码实例&quot; class=&quot;headerlink&quot; title=&quot;代码实例&quot;&gt;&lt;/a&gt;代码实例&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;53&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;54&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;55&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;56&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;57&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;58&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;59&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;public abstract class CarBuilder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置组装顺序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public abstract void setSequence(ArrayList&amp;lt;String&amp;gt; sequence);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置完毕顺序后，就可以直接拿到这个车辆模型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public abstract CarModel getCarModel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class BenzBuilder extends CarBuilder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private BenzModel benz = new BenzModel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置组装顺序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setSequence(ArrayList&amp;lt;String&amp;gt; sequence)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.benz.setSequence(sequence);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置完毕顺序后，就可以直接拿到这个车辆模型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public CarModel getCarModel() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return this.benz;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class BMWBuilder extends CarBuilder &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private BMWModel bmw = new BMWModel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置组装顺序&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void setSequence(ArrayList&amp;lt;String&amp;gt; sequence)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.bmw.setSequence(sequence);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    //设置完毕顺序后，就可以直接拿到这个车辆模型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public CarModel getCarModel() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return this.bmw;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Director &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private ArrayList&amp;lt;String&amp;gt; sequence = new ArrayList();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private BenzBuilder benzBuilder = new BenzBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    private BMWBuilder bmwBuilder = new bmwBuilder();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public BenzModel getABenzModel() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.sequence.clear();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.sequesce.add(&amp;quot;start&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.sequesce.add(&amp;quot;stop&amp;quot;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.benzBuilder.setSequence(this.sequence);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        return (BenzModel)this.benzBuilder.getCarModel();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Client &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        Director director = new Director();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        for(int i = 0; i &amp;lt; 1000; i++) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            director.getABenzModel().run();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;需求是无底洞，是无理性的&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://ElaineKoo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="建造者模式" scheme="http://ElaineKoo.github.io/tags/%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>模板方法模式</title>
    <link href="http://ElaineKoo.github.io/2018/11/13/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ElaineKoo.github.io/2018/11/13/模板方法模式/</id>
    <published>2018-11-13T02:17:06.000Z</published>
    <updated>2018-11-19T04:30:35.983Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代码示例"><a href="#代码示例" class="headerlink" title="代码示例"></a>代码示例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">//抽象悍马模型</span><br><span class="line">public abstract class HummerModel &#123;</span><br><span class="line">    public abstract void start();</span><br><span class="line">    public abstract void stop();</span><br><span class="line">    public abstract void alarm();</span><br><span class="line">    public abstract void engineBoom();</span><br><span class="line">    public void run() &#123;</span><br><span class="line">        this.start(); </span><br><span class="line">        this.engineBoom(); </span><br><span class="line">        this.alarm(); </span><br><span class="line">        this.stop(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//悍马模型H1</span><br><span class="line">public class HummerH1Model extends HummerModel &#123;</span><br><span class="line">    public void alarm() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void engineBoom() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void stop() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//悍马模型H2</span><br><span class="line">public class HummerH2Model extends HummerModel &#123;</span><br><span class="line">    public void alarm() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void engineBoom() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void stop() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Client() &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HummerModel h1 = new HummerH1Model();</span><br><span class="line">        h1.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>在软件开发过程中，如果相同的一段代码复制过两次，就需要对设计产生怀疑，架构师要明确地说明为什么相同的逻辑要出现两次或更多次</em></p><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>定义一个操作中的算法的框架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。<br>常用设计模式</p><h2 id="AbstractClass"><a href="#AbstractClass" class="headerlink" title="AbstractClass"></a>AbstractClass</h2><p>AbstractClass叫做抽象模板，方法分为：基本方法和模板方法，基本方法由子类实现，模板方法一般是一个具体的方法。为防止恶意修改，一般模板方法都加上final关键字，不允许被覆写。基本方法尽量设计为protected类型，符合迪米特法则，不需要暴露的属性或方法尽量不要设置为protected类型。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>封装不变部分，扩展可变部分</li><li>提取公共部分代码，便于维护</li><li>行为由父类控制，子类实现。符合开闭原则</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>在复杂项目中，会带来代码阅读的难度，新手产生不适感</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>多个子类有公有的方法，而且逻辑基本相同时</li><li>重要、、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能则由各个子类实现</li><li>重构时，模板方法模式是最常用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为</li></ol><h2 id="扩展——钩子方法"><a href="#扩展——钩子方法" class="headerlink" title="扩展——钩子方法"></a>扩展——钩子方法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">//抽象悍马模型</span><br><span class="line">public abstract class HummerModel &#123;</span><br><span class="line">    public abstract void start();</span><br><span class="line">    public abstract void stop();</span><br><span class="line">    public abstract void alarm();</span><br><span class="line">    public abstract void engineBoom();</span><br><span class="line">    final public void run() &#123;</span><br><span class="line">        this.start(); </span><br><span class="line">        this.engineBoom(); </span><br><span class="line">        //this.alarm(); </span><br><span class="line">        if(this.isAlarm()) &#123;</span><br><span class="line">            this.alarm();</span><br><span class="line">        &#125;</span><br><span class="line">        this.stop(); </span><br><span class="line">    &#125;</span><br><span class="line">    //默认响喇叭，钩子方法</span><br><span class="line">    protected boolean isAlarm() &#123;</span><br><span class="line">        return true;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//悍马模型H1</span><br><span class="line">public class HummerH1Model extends HummerModel &#123;</span><br><span class="line">    private boolean alarmFlag = true;</span><br><span class="line">    public void alarm() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void engineBoom() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void stop() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    //设置是否响喇叭</span><br><span class="line">    public void setAlarm(boolean isAlarm) &#123;</span><br><span class="line">        this.alarmFlag = isAlarm;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//悍马模型H2</span><br><span class="line">public class HummerH2Model extends HummerModel &#123;</span><br><span class="line">    public void alarm() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void engineBoom() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void start() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">    public void stop() &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;    </span><br><span class="line">    //默认不响喇叭</span><br><span class="line">    protected boolean isAlarm() &#123;</span><br><span class="line">        return false;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public class Client() &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        HummerModel h1 = new HummerH1Model();</span><br><span class="line">        h1.setAlarm(false);</span><br><span class="line">        h1.run();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>外界条件改变，影响模板方法的执行，isAlarm的返回值影响了模板方法的执行结果，该方法叫做钩子方法（Hook Method）</em></p><p>参考<br>《设计模式之禅》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;代码示例&quot;&gt;&lt;a href=&quot;#代码示例&quot; class=&quot;headerlink&quot; title=&quot;代码示例&quot;&gt;&lt;/a&gt;代码示例&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;44&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;45&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;46&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;47&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;48&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;49&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;50&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;51&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;52&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//抽象悍马模型&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public abstract class HummerModel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public abstract void start();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public abstract void stop();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public abstract void alarm();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public abstract void engineBoom();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void run() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.start(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.engineBoom(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.alarm(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        this.stop(); &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//悍马模型H1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class HummerH1Model extends HummerModel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void alarm() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void engineBoom() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void start() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void stop() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//悍马模型H2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class HummerH2Model extends HummerModel &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void alarm() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void engineBoom() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void start() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public void stop() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        ...&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;public class Client() &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    public static void main(String[] args) &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        HummerModel h1 = new HummerH1Model();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        h1.run();&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;em&gt;在软件开发过程中，如果相同的一段代码复制过两次，就需要对设计产生怀疑，架构师要明确地说明为什么相同的逻辑要出现两次或更多次&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://ElaineKoo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="模板方法模式" scheme="http://ElaineKoo.github.io/tags/%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>抽象工厂模式</title>
    <link href="http://ElaineKoo.github.io/2018/11/13/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ElaineKoo.github.io/2018/11/13/抽象工厂模式/</id>
    <published>2018-11-13T02:08:40.000Z</published>
    <updated>2018-11-19T04:30:35.960Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>为创建一组相关或相互依赖的对象提供一个接口，并且无需指定他们的具体类<br>抽象工厂模式是工厂方法模式的升级版本，在多个业务品种、业务分类时，通过抽象工厂模式产生需要的对象是一种非常好的解决方式<br>有N个产品族，在抽象工厂类中就应该有N个创建方法</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>封装性。每个产品的实现类不是高层模块要关心的，高层模块只关心接口，抽象，不关心对象是如何创建出来的。工厂类负责关心对象是如何创建出来的，产品只要知道工厂类是谁，就能创建出一个需要的对象，省时省力。</li><li>产品族内的约束为非公开状态。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>最大缺点是：产品族扩展非常困难，严重违反开闭原则！</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>一个对象族（或是一组没有任何关系的对象）都有相同的约束，则可以使用抽象工厂模式<br>例：一个文本编辑器和一个图片处理器，都是软件实体，在操作系统不同下，虽然功能和界面相同，但代码实现不同，图片处理器也有类似情况。这就是具有了共同的约束条件：操作系统类型。于是可以使用抽象工厂模式，产生不同操作系统下的编辑器和图片处理器</p><h2 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h2><p>产品族扩展非常困难，但产品等级扩展非常简单。横向扩展容易，纵向扩展困难。例：不同肤色和不同性别的人类例子中，扩展肤色困难，但是扩展性别简单，这是符合开闭原则的。<br>在软件产品开发过程中，设计不同操作系统时，都可以考虑使用抽象工厂模式。</p><p>参考<br>《设计模式之禅》</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;为创建一组相关或相互依赖的对象提供一个接口，并且无需指定他们的具体类&lt;br&gt;抽象工厂模式是工厂方法模式的升级版本，在多个业务品种、业务分类时
      
    
    </summary>
    
    
      <category term="设计模式" scheme="http://ElaineKoo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="抽象工厂模式" scheme="http://ElaineKoo.github.io/tags/%E6%8A%BD%E8%B1%A1%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>工厂方法模式</title>
    <link href="http://ElaineKoo.github.io/2018/11/13/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ElaineKoo.github.io/2018/11/13/工厂方法模式/</id>
    <published>2018-11-13T02:03:38.000Z</published>
    <updated>2018-11-19T04:30:35.966Z</updated>
    
    <content type="html"><![CDATA[<h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。</p><a id="more"></a><h2 id="通用代码"><a href="#通用代码" class="headerlink" title="通用代码"></a>通用代码</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">//抽象产品类</span><br><span class="line">public abstract class Product&#123;</span><br><span class="line">    //产品类共有方法</span><br><span class="line">    public void method1()&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    //抽象方法</span><br><span class="line">    public abstract void method2();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//产品1类</span><br><span class="line">public class Product1 extends Product &#123;</span><br><span class="line">    public void method2()&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//抽象工厂类</span><br><span class="line">public abstract class Creator &#123;</span><br><span class="line">    public abstract &lt;T extends Product&gt; T createProduct(Class&lt;T&gt; c);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//具体工厂1类</span><br><span class="line">public class Creator1 extends Creator &#123;</span><br><span class="line">    public &lt;T extends Product&gt; T createProduct(Class&lt;T&gt; c) &#123;</span><br><span class="line">        Product product = null;</span><br><span class="line">        try &#123;</span><br><span class="line">            product = (Product)Class.forName(c.getName()).newInstance();</span><br><span class="line">        &#125; catch (Exception e)&#123;</span><br><span class="line">            //异常处理</span><br><span class="line">        &#125;</span><br><span class="line">        return (T)product;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//调用</span><br><span class="line">public class Client &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        Creator creator = new Creator1();</span><br><span class="line">        Product product = creator.createProduct(Product1.class);</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>优良的封装性，代码结构清晰，降低模块间的耦合性</li><li>扩展性非常优秀</li><li>屏蔽产品类</li><li>解耦框架。高层模块只需要产品的抽象类，其他的实现类都不关心，符合迪米特法则（不需要的不交流），也符合依赖倒置原则（只依赖产品类的抽象），也符合里氏替换原则（使用产品子类替换产品父类</li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>在所有需要生成对象的地方都可以使用</li><li>需要灵活的、可扩展的框架时，可以考虑采用工厂方法模式</li><li>工厂方法模式可以用在异构项目中</li><li>TDD开发的框架下</li></ol><h2 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h2><ol><li>缩小为简单工厂模式<br>一个模块只需要一个工厂类，没有必要把它生产出来。该模式是工厂方法模式的弱化，因为简单，成为简单工厂模式，也叫静态工厂模式。缺点是工厂类的扩展比较困难，不符合开闭原则，但仍然是一个非常实用的设计模式</li><li>升级为多个工厂类<br>抽象方法中已经不再需要传递相关参数了，因为每个具体的工厂都已经非常明确自己的职责：创建自己负责的产品类对象。增加扩展的难度。</li><li>替代单例模式<br>通过反射方式创建</li><li>延迟初始化<br>一个对象被消费完毕后，不立刻释放，工厂类保持其初始状态，等待再次被使用。</li></ol><p>参考<br>《设计模式之禅》</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;定义&quot;&gt;&lt;a href=&quot;#定义&quot; class=&quot;headerlink&quot; title=&quot;定义&quot;&gt;&lt;/a&gt;定义&lt;/h2&gt;&lt;p&gt;定义一个用于创建对象的接口，让子类决定实例化哪一个类。工厂方法使一个类的实例化延迟到其子类。&lt;/p&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://ElaineKoo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="工厂方法模式" scheme="http://ElaineKoo.github.io/tags/%E5%B7%A5%E5%8E%82%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>单例模式</title>
    <link href="http://ElaineKoo.github.io/2018/11/12/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://ElaineKoo.github.io/2018/11/12/单例模式/</id>
    <published>2018-11-12T10:54:04.000Z</published>
    <updated>2018-11-19T04:30:35.976Z</updated>
    
    <content type="html"><![CDATA[<p>Singleton类称为单例类<br>通过定义一个私有访问权限的构造函数，避免被其他类new出来一个对象</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式优势明显</li><li>由于单例模式只生成一个实例，所以减少了系统的性能开销。当一个对象的产生需要比较多资源的时候，如读取配置、产生其他依赖对象时，则可以通过在<em>应用启动时</em>直接产生一个单例对象，然后用永久驻留内存的方式来解决。</li><li>单例模式可以避免对资源的多重占用，如避免对同一资源文件的同时写操作</li><li>单例模式可以在系统设置全局访问点，优化和共享资源访问。如设计一个单例类，负责所有数据表的映射处理。</li></ol><a id="more"></a><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>一般没有接口，扩展很困难，若要扩展，除了修改代码基本上没有第二种途径可以实现。<br>接口对单例模式没有任何意义，它要求“自行实例化”，并且提供单一实例、接口或抽象类是不可能被实例化的。</li><li>单一模式对测试是不利的。<br>在并行开发的环境中，如果单例模式没有完成，是不能进行测试的，没有接口也不能使用mock的方式虚拟一个对象。</li><li>单例模式与单一职责原则有冲突。<br>一个类应该只实现一个逻辑，而不关心它是否是单例的，是不是要单例取决于环境，单例模式把“要单例”和业务逻辑融合在一个类中。</li></ol><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><ol><li>要求生成唯一序列号的环境</li><li>在整个项目中需要一个共享访问点或共享数据，如web页面上的计数器</li><li>创建一个对象需要消耗的资源过多，如要访问IO和数据库等资源</li><li>需要定义大量的静态常量和静态方法的环境，可以采用单例模式</li></ol><h2 id="两种常见写法"><a href="#两种常见写法" class="headerlink" title="两种常见写法"></a>两种常见写法</h2><p>饿汉式单例：(单例模式通用代码)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">    private static final Singleton singleton = new Singleton();</span><br><span class="line">    //限制产生多个对象</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    //通过该方法获得实例对象</span><br><span class="line">    public static Singleton getSingleton()&#123;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    //其他方法尽量使static</span><br><span class="line">    public static void doSomething()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>懒汉式单例：（线程不安全单例）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">    private static Singleton singleton = null;</span><br><span class="line">    //限制产生多个对象</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    //通过该方法获得实例对象</span><br><span class="line">    public static Singleton getSingleton()&#123;</span><br><span class="line">        if(singleton == null) &#123;</span><br><span class="line">            singleton = new Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    //其他方法尽量使static</span><br><span class="line">    public static void doSomething()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>【修改后】懒汉式单例：（线程安全单例）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">public class Singleton&#123;</span><br><span class="line">    private static Singleton singleton = null;</span><br><span class="line">    //限制产生多个对象</span><br><span class="line">    private Singleton() &#123;</span><br><span class="line">    &#125;</span><br><span class="line">    //通过该方法获得实例对象</span><br><span class="line">    public static Singleton getSingleton()&#123;</span><br><span class="line">        if(singleton == null) &#123;</span><br><span class="line">            lock(singleton) &#123;</span><br><span class="line">                if(singleton == null) &#123; //由于某些情况下，可能有延迟加载或者缓存的原因，需要多做一次判断</span><br><span class="line">                    singleton = new Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        return singleton;</span><br><span class="line">    &#125;</span><br><span class="line">    //其他方法尽量使static</span><br><span class="line">    public static void doSomething()&#123;</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ol><li>懒汉式单例高并发情况下，注意单例模式的线程同步问题<br>解决方法，可以在getSingleton方法前加synchronized关键字，也可以在该方法内增加synchronized来实现</li><li>需要考虑对象的复制情况<br>解决方法，单例类不实现Cloneable接口</li></ol><h2 id="单例模式的扩展"><a href="#单例模式的扩展" class="headerlink" title="单例模式的扩展"></a>单例模式的扩展</h2><ol><li>有上限的多例模式：如果要求一个类只能产生两三个对象</li></ol><p>参考<br>《设计模式之禅》</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Singleton类称为单例类&lt;br&gt;通过定义一个私有访问权限的构造函数，避免被其他类new出来一个对象&lt;/p&gt;
&lt;h2 id=&quot;优点&quot;&gt;&lt;a href=&quot;#优点&quot; class=&quot;headerlink&quot; title=&quot;优点&quot;&gt;&lt;/a&gt;优点&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;在内存中只有一个实例，减少了内存开支，特别是一个对象需要频繁地创建、销毁时，而且创建或销毁时性能又无法优化，单例模式优势明显&lt;/li&gt;
&lt;li&gt;由于单例模式只生成一个实例，所以减少了系统的性能开销。当一个对象的产生需要比较多资源的时候，如读取配置、产生其他依赖对象时，则可以通过在&lt;em&gt;应用启动时&lt;/em&gt;直接产生一个单例对象，然后用永久驻留内存的方式来解决。&lt;/li&gt;
&lt;li&gt;单例模式可以避免对资源的多重占用，如避免对同一资源文件的同时写操作&lt;/li&gt;
&lt;li&gt;单例模式可以在系统设置全局访问点，优化和共享资源访问。如设计一个单例类，负责所有数据表的映射处理。&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://ElaineKoo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
      <category term="单例模式" scheme="http://ElaineKoo.github.io/tags/%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>六大设计原则(SOLID)</title>
    <link href="http://ElaineKoo.github.io/2018/11/12/%E5%85%AD%E5%A4%A7%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99(SOLID)/"/>
    <id>http://ElaineKoo.github.io/2018/11/12/六大设计原则(SOLID)/</id>
    <published>2018-11-12T06:05:00.000Z</published>
    <updated>2018-11-19T04:30:35.963Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h1><p>一个接口或类只有一个原因引起变化</p><h2 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h2><ol><li>类的复杂度降低</li><li>可读性提高</li><li>可维护性提高</li><li>变更引起的风险降低</li></ol><h2 id="难以实现的原因"><a href="#难以实现的原因" class="headerlink" title="难以实现的原因"></a>难以实现的原因</h2><p>环境、工作量、人员的技术水平、硬件资源、文化差异…</p><hr><h1 id="里式替换原则"><a href="#里式替换原则" class="headerlink" title="里式替换原则"></a>里式替换原则</h1><p>为良好的继承定义了一个规范</p><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><ol><li>子类必须完全实现父类的方法。<br>如果子类不能完整地实现父类的方法，或者父类的某些方法在子类中已经发生“畸变”，则建议断开父子继承关系，采用依赖、聚集、组合等关系代替继承</li><li>子类可以有自己的个性</li><li>覆盖或实现父类的方法时输入参数可以被放大<br>子类中方法的前置条件必须与超类中被覆写的方法的前置条件相同或者更宽松</li><li>覆写或实现父类的方法时输出结果可以被缩小<br>子类返回值必须和父类返回值同类型或是父类返回值的子类</li></ol><a id="more"></a><hr><h1 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h1><p>正置是面向实现编程，倒置是面向接口编程<br>是实现开闭原则的重要途径<br>本质是通过抽象（接口或抽象类）使各个类或模块的是想彼此独立，不互相影响，实现模块间的松耦合。</p><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><ol><li>高层模块不应该依赖底层模块，两者都应该依赖其抽象<br>抽象指接口或抽象类</li><li>抽象不应该依赖细节</li><li>细节应该依赖抽象</li></ol><p>减少类间的耦合性，提高系统的稳定性<br>依赖是可传递的</p><h2 id="三种写法"><a href="#三种写法" class="headerlink" title="三种写法"></a>三种写法</h2><ol><li>构造函数传递依赖对象</li><li>Setter方法传递依赖对象</li><li>接口声明依赖对象</li></ol><h2 id="原则"><a href="#原则" class="headerlink" title="原则"></a>原则</h2><ol><li>每个类尽量都有接口或抽象类，或者抽象类和接口两者都具备</li><li>变量的表面类型尽量是接口或者是抽象类</li><li>任何类都不应该从具体类派生</li><li>尽量不要覆写基类的方法<br>类型依赖的是抽象，覆写了抽象方法，对依赖的稳定性会产生一定的影响</li><li>结合里氏替换原则使用<br>接口负责定义public属性和方法，并且声明与其他对象的依赖关系，抽象类负责公共构造部分的实现，实现类准确地实现业务逻辑，同时在适当的时候对父类进行细化。</li></ol><hr><h1 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h1><h2 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h2><ol><li>实例接口</li><li>类接口</li></ol><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><ol><li>客户端不应该依赖它不需要的接口</li><li>类间的依赖关系应该建立在最小的接口上</li></ol><h2 id="接口尽量细化，同时接口中的方法尽量少，与单一职责的不同"><a href="#接口尽量细化，同时接口中的方法尽量少，与单一职责的不同" class="headerlink" title="接口尽量细化，同时接口中的方法尽量少，与单一职责的不同"></a>接口尽量细化，同时接口中的方法尽量少，与单一职责的不同</h2><p>与单一职责的视角不同，单一职责要求的是类和接口职责单一，注重的是职责，这是业务逻辑上的划分；接口隔离原则是要求接口的方法尽量少，提供给每个模块的都应该是单一接口，提供给几个模块就应该有几个接口，而不是建立一个庞大的臃肿的接口，容纳所有的客户端访问</p><h2 id="保证接口的纯洁性"><a href="#保证接口的纯洁性" class="headerlink" title="保证接口的纯洁性"></a>保证接口的纯洁性</h2><ol><li>接口要尽量小<br>根于接口隔离原则拆分接口时，首先必须满足单一职责原则</li><li>接口要高内聚<br>提高接口、类、模块的处理能力，减少对外的交互。要求接口中尽量少公布public方法，接口是对外的承诺，承诺越少对系统开发越有利，变更的风险也就越少，同时也有利于降低成本。</li><li>定制服务<br>只提供访问者的需要的方法</li><li>接口设计是有限度的<br>接口的设计粒度越小，系统越灵活</li></ol><hr><h1 id="迪米特法则——最少知识原则"><a href="#迪米特法则——最少知识原则" class="headerlink" title="迪米特法则——最少知识原则"></a>迪米特法则——最少知识原则</h1><p>一个对象应该对其他对象有最少的了解</p><h2 id="原则-1"><a href="#原则-1" class="headerlink" title="原则"></a>原则</h2><ol><li>只和朋友交流<br>两个对象之间耦合就成为朋友，组合、聚合、依赖等</li><li>朋友间也是有距离的</li><li>是自己的就是自己的<br>如果一个方法放在本类中，既不增加类间关系，也对本类不产生负面影响，那就放置在本类中</li><li>谨慎使用Serializable</li></ol><h2 id="核心观念"><a href="#核心观念" class="headerlink" title="核心观念"></a>核心观念</h2><p>类间解耦，弱耦合，只有弱耦合了以后，类的复用率才可以提高。但解耦是有限度的。</p><hr><h1 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h1><p>一个软件实体如类、模块和函数应该对扩展开放，对修改关闭。<br>尽量通过扩展软件实体的行为来实现变化，而不是通过修改已有的代码来完成变化，它是为软件实体的未来事件而制定的对现行开发设计进行约束的一个原则。<br>开闭原则对扩展开放，对修改关闭，并不意味着不做任何修改，底层模块的变更，必然要有高层模块进行耦合，否则就是一个孤立无意义的代码片段</p><h2 id="软件实体"><a href="#软件实体" class="headerlink" title="软件实体"></a>软件实体</h2><ol><li>项目或软件产品中按照一定的逻辑规则划分的模块</li><li>抽象和类</li><li>方法</li></ol><h2 id="变化的归纳"><a href="#变化的归纳" class="headerlink" title="变化的归纳"></a>变化的归纳</h2><ol><li>逻辑变化</li><li>子模块变化</li><li>可见视图变化</li></ol><h2 id="为什么"><a href="#为什么" class="headerlink" title="为什么"></a>为什么</h2><ol><li>开闭原则对测试的影响</li><li>开闭原则可以提高复用性<br>粒度越小，被复用的可能性越大</li><li>开闭原则可以提高可维护性</li><li>面向对象开发的要求</li></ol><h2 id="如何使用开闭原则"><a href="#如何使用开闭原则" class="headerlink" title="如何使用开闭原则"></a>如何使用开闭原则</h2><ol><li>抽象约束</li><li>元数据控制模块行为</li><li>制定项目章程</li><li>封装变化</li></ol><h2 id="注意以下问题"><a href="#注意以下问题" class="headerlink" title="注意以下问题"></a>注意以下问题</h2><ol><li>开闭原则也只是一个原则</li><li>项目规章非常重要</li><li>预知变化</li></ol><p>参考<br>《设计模式之禅》</p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;单一职责原则&quot;&gt;&lt;a href=&quot;#单一职责原则&quot; class=&quot;headerlink&quot; title=&quot;单一职责原则&quot;&gt;&lt;/a&gt;单一职责原则&lt;/h1&gt;&lt;p&gt;一个接口或类只有一个原因引起变化&lt;/p&gt;
&lt;h2 id=&quot;好处&quot;&gt;&lt;a href=&quot;#好处&quot; class=&quot;headerlink&quot; title=&quot;好处&quot;&gt;&lt;/a&gt;好处&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;类的复杂度降低&lt;/li&gt;
&lt;li&gt;可读性提高&lt;/li&gt;
&lt;li&gt;可维护性提高&lt;/li&gt;
&lt;li&gt;变更引起的风险降低&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;难以实现的原因&quot;&gt;&lt;a href=&quot;#难以实现的原因&quot; class=&quot;headerlink&quot; title=&quot;难以实现的原因&quot;&gt;&lt;/a&gt;难以实现的原因&lt;/h2&gt;&lt;p&gt;环境、工作量、人员的技术水平、硬件资源、文化差异…&lt;/p&gt;
&lt;hr&gt;
&lt;h1 id=&quot;里式替换原则&quot;&gt;&lt;a href=&quot;#里式替换原则&quot; class=&quot;headerlink&quot; title=&quot;里式替换原则&quot;&gt;&lt;/a&gt;里式替换原则&lt;/h1&gt;&lt;p&gt;为良好的继承定义了一个规范&lt;/p&gt;
&lt;h2 id=&quot;规则&quot;&gt;&lt;a href=&quot;#规则&quot; class=&quot;headerlink&quot; title=&quot;规则&quot;&gt;&lt;/a&gt;规则&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;子类必须完全实现父类的方法。&lt;br&gt;如果子类不能完整地实现父类的方法，或者父类的某些方法在子类中已经发生“畸变”，则建议断开父子继承关系，采用依赖、聚集、组合等关系代替继承&lt;/li&gt;
&lt;li&gt;子类可以有自己的个性&lt;/li&gt;
&lt;li&gt;覆盖或实现父类的方法时输入参数可以被放大&lt;br&gt;子类中方法的前置条件必须与超类中被覆写的方法的前置条件相同或者更宽松&lt;/li&gt;
&lt;li&gt;覆写或实现父类的方法时输出结果可以被缩小&lt;br&gt;子类返回值必须和父类返回值同类型或是父类返回值的子类&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="设计模式" scheme="http://ElaineKoo.github.io/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>Mysql 数据类型</title>
    <link href="http://ElaineKoo.github.io/2018/11/06/Mysql-%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>http://ElaineKoo.github.io/2018/11/06/Mysql-数据类型/</id>
    <published>2018-11-06T06:53:35.000Z</published>
    <updated>2018-11-19T04:30:35.942Z</updated>
    
    <content type="html"><![CDATA[<h2 id="基本类型"><a href="#基本类型" class="headerlink" title="基本类型"></a>基本类型</h2><h3 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h3><blockquote><ul><li>TINYINT = 2^8 bit = 1字节</li><li>SMALLINT = 2 * 2^8 bit = 2字节</li><li>MEDIUMINT = 3 * 2^8 bit = 3字节</li><li>INT = INTEGER = 4 * 2^8 bit = 4字节</li><li>BIGINT = 8 * 2^8 bit = 8字节</li></ul></blockquote><p><em>取值范围如果加了 unsigned，则最大值翻倍</em></p><a id="more"></a><h3 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h3><blockquote><ul><li>FLOAT = 4 * 2^8 = 4字节</li><li>DOUBLE = 8 * 2^8 bit = 8字节</li><li>DECIMAL 对DECIMAL(M,D) ，如果M&gt;D，为M+2，否则为D+2。</li></ul></blockquote><p><em>D&lt;=M &amp;&amp; &amp;&amp; M&gt;=0 &amp;&amp; D&lt;=30, M&gt;=1 &amp;&amp; M&lt;=65。</em></p><h3 id="日期和时间类型"><a href="#日期和时间类型" class="headerlink" title="日期和时间类型"></a>日期和时间类型</h3><blockquote><ul><li>DATE = 3字节 YYYY-MM-DD</li><li>TIME = 3字节 HH:MM:SS</li><li>YEAR = 1字节 YYYY</li><li>DATETIME = 8字节 YYYY-MM-DD HH:MM:SS</li><li>TIMESTAMP = 4字节 2147483647（类似INT）</li></ul></blockquote><h3 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h3><blockquote><ul><li>CHAR = 2^8字节（定长，不区分大小写）</li><li>VARCHAR = 2^16字节（变长，不区分大小写）</li></ul></blockquote><p><em>char为定长，后面加空格，如果数据中末尾有空格会被去掉，且不区分大小写</em></p><blockquote><ul><li>TINYBLOB = 2^8字节 不超过 255 个字符的二进制字符串</li><li>TINYTEXT = 2^8字节</li></ul></blockquote><blockquote><ul><li>BLOB = 2^8 * 2^8 = 2^16字节</li><li>TEXT = 2^8 * 2^8 = 2^16字节</li></ul></blockquote><blockquote><ul><li>MEDIUMBLOB = 2^8 <em> 2^8 </em> 2^8 = 2^24字节</li><li>MEDIUMTEXT = 2^8 <em> 2^8 </em> 2^8 = 2^24字节</li></ul></blockquote><blockquote><ul><li>LONGBLOB = 2^8 <em> 2^8 </em> 2^8* 2^8 = 2^32字节</li><li>LONGTEXT = 2^8 <em> 2^8 </em> 2^8* 2^8 = 2^32字节</li></ul></blockquote><h2 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h2><h3 id="一个汉字占多少长度与编码有关：（MySQL-5-0-以上的版本）"><a href="#一个汉字占多少长度与编码有关：（MySQL-5-0-以上的版本）" class="headerlink" title="一个汉字占多少长度与编码有关：（MySQL 5.0 以上的版本）"></a>一个汉字占多少长度与编码有关：（MySQL 5.0 以上的版本）</h3><ul><li>UTF－8：一个汉字（含繁体）＝3个字节 ；</li><li>GBK：一个汉字＝2个字节</li></ul><h3 id="char-和-varchar-区别："><a href="#char-和-varchar-区别：" class="headerlink" title="char 和 varchar 区别："></a>char 和 varchar 区别：</h3><ul><li>CHAR和VARCHAR在存储或检索过程中不进行大小写转换。</li><li>char(n) 若存入字符数小于n，则以空格补于其后，查询之时再将空格去掉。所以 char 类型存储的字符串末尾不能有空格，varchar 不限于此。</li><li>char(n) 固定长度，char(4) 不管是存入几个字符，都将占用 4 个字节，varchar 是存入的实际字符数 +1 个字节（n&lt;=255）或2个字节(n&gt;255)，多的字节用来记录长度。所以 varchar(4),存入 3 个字符将占用 4 个字节。</li><li>char 类型的字符串检索速度要比 varchar 类型的快。</li></ul><h3 id="varchar-和-text-区别："><a href="#varchar-和-text-区别：" class="headerlink" title="varchar 和 text 区别："></a>varchar 和 text 区别：</h3><ul><li>varchar 可指定 n，text 不能指定，内部存储 varchar 是存入的实际字符数 +1 个字节（n&lt;=255）或 2 个字节(n&gt;255)，text 是实际字符数 +2 个字节。</li><li>text 类型不能有默认值。</li><li>varchar 可直接创建索引，text 创建索引指定索引前缀的长度。varchar 查询速度快于 text, 在都创建索引的情况下，text 的索引似乎不起作用。</li></ul><h3 id="二进制数据-Blob-和-text-区别："><a href="#二进制数据-Blob-和-text-区别：" class="headerlink" title="二进制数据(_Blob) 和 text 区别："></a>二进制数据(_Blob) 和 text 区别：</h3><ul><li>BLOB 是一个二进制大对象</li><li>_BLOB和_text存储方式不同，_TEXT以文本方式存储，英文存储区分大小写，而_Blob是以二进制方式存储，不分大小写。</li><li>_BLOB存储的数据只能整体读出。</li><li>_TEXT可以指定字符集，_BLO不用指定字符集。</li></ul><h3 id="ENUM-和-SET-区别："><a href="#ENUM-和-SET-区别：" class="headerlink" title="ENUM 和 SET 区别："></a>ENUM 和 SET 区别：</h3><ul><li>ENUM = 1字节或2字节 最多2字节（2^16）</li><li>ENUM是一个字符串对象，可以插入空字符串””（索引：0）和NULL（索引：NULL），从1开始编号。其值来自表创建时在列规定中显式枚举的一列值</li><li>SET = 1字节或2字节或3字节或4字节或8字节</li><li>SET是一个字符串对象，可以有零或多个值，最多可以设置64个值，其值来自表创建时规定的允许的一列值</li></ul><p>参考<br><a href="http://www.runoob.com/mysql/mysql-data-types.html" target="_blank" rel="noopener">http://www.runoob.com/mysql/mysql-data-types.html</a><br><a href="https://www.cnblogs.com/Caveolae/p/7058890.html" target="_blank" rel="noopener">https://www.cnblogs.com/Caveolae/p/7058890.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;基本类型&quot;&gt;&lt;a href=&quot;#基本类型&quot; class=&quot;headerlink&quot; title=&quot;基本类型&quot;&gt;&lt;/a&gt;基本类型&lt;/h2&gt;&lt;h3 id=&quot;整型&quot;&gt;&lt;a href=&quot;#整型&quot; class=&quot;headerlink&quot; title=&quot;整型&quot;&gt;&lt;/a&gt;整型&lt;/h3&gt;&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;TINYINT = 2^8 bit = 1字节&lt;/li&gt;
&lt;li&gt;SMALLINT = 2 * 2^8 bit = 2字节&lt;/li&gt;
&lt;li&gt;MEDIUMINT = 3 * 2^8 bit = 3字节&lt;/li&gt;
&lt;li&gt;INT = INTEGER = 4 * 2^8 bit = 4字节&lt;/li&gt;
&lt;li&gt;BIGINT = 8 * 2^8 bit = 8字节&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;em&gt;取值范围如果加了 unsigned，则最大值翻倍&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="mysql" scheme="http://ElaineKoo.github.io/tags/mysql/"/>
    
  </entry>
  
</feed>
